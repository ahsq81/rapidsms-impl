#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4 coding=utf-8
# maintainer: rgaudin

''' childcount host helper script

    gives easy access to vbox usefull functions. '''

import getopt
import sys
import subprocess
from optparse import OptionParser


# configure following
machines = ['rsms', 'omrs']


class VirtualMachine(object):

    instances = []
    HEADLESS = '/usr/bin/VBoxHeadless'
    MANAGE = '/usr/bin/VBoxManage'
    GREP = '/usr/bin/grep'

    def __call__(self, *args, **kw):
        ins = VirtualMachine(*args, **kw)
        return ins

    def __init__(self, name):
        self.name = name
        VirtualMachine.instances.append(self)

    def __str__(self):
        return self.name

    @classmethod
    def all(cls):
        return cls.instances

    @classmethod
    def get(cls, id_):
        for ins in cls.all():
            if ins.name == id_:
                return ins
        raise NameError

    def start(self):
        p = subprocess.Popen([self.HEADLESS, '--startvm', self.name, \
                              '--vrdp', 'config'])

    def stop(self):
        p = subprocess.Popen([self.MANAGE, 'controlvm', self.name, \
                              'acpipowerbutton'])

    def info(self):
        p = subprocess.Popen([self.MANAGE, 'showvminfo', self.name])

    def isrunning(self):
        p1 = subprocess.Popen([self.MANAGE, 'showvminfo', self.name], \
                              stdout=subprocess.PIPE)
        p2 = subprocess.Popen([self.GREP, "State"], stdin=p1.stdout, \
                              stdout=subprocess.PIPE)
        try:
            output = p2.communicate()[0].strip()
            ind = output.index('running')
            running = True
        except:
            running = False
        return running

    @classmethod
    def usb(self):
        p = subprocess.Popen([self.MANAGE, 'list', 'usbhost'])


def listlocal(option, opt_str, value, parser, *args, **kwargs):
    for vm in VirtualMachine.all():
        print vm


def listall(option, opt_str, value, parser, *args, **kwargs):
    for vm in VirtualMachine.all():
        print u"%(vm)s: %(state)s" \
              % {'vm': vm, 'state': 'on' if vm.isrunning() else 'off'}


def startall(option, opt_str, value, parser, *args, **kwargs):

    for vm in VirtualMachine.all():
        vm.start()


def stopall(option, opt_str, value, parser, *args, **kwargs):

    for vm in VirtualMachine.all():
        vm.stop()


def start(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.start()


def stop(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.stop()


def info(option, opt_str, value, parser, *args, **kwargs):

    vm = VirtualMachine.get(value)
    vm.info()


def usb(option, opt_str, value, parser, *args, **kwargs):
    VirtualMachine.usb()


def main():

    # instanciate VMs
    for name in machines:
        vm = VirtualMachine(name)

    usage = "usage: %prog [options] arg"
    parser = OptionParser(usage)

    parser.description = "Handy wrapper around virtualbox for childcount"

    parser.add_option("--listlocal", action="callback", callback=listlocal, \
                      help="list names of VMs. Edit script to change.")
    parser.add_option("--listall", action="callback", callback=listall, \
                      help="list all VMs with their status.")
    parser.add_option("--usb", action="callback", callback=usb, \
                      help="list all USB devices on the host.")
    parser.add_option("--startall", action="callback", callback=startall, \
                      help="start all VMs.")
    parser.add_option("--stopall", action="callback", callback=stopall, \
                      help="sends shutdown to all VMs.")
    parser.add_option("--start", action="callback", callback=start, \
                      type="str", metavar="VM", \
                      help="starts the VM named [VM].")
    parser.add_option("--stop", action="callback", callback=stop, type="str", \
                      metavar="VM", \
                      help="sends shutdown to the VM named [VM].")
    parser.add_option("--info", action="callback", callback=info, type="str", \
                      metavar="VM", \
                      help="displays info for the VM named [VM].")

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.error("No argument specified.")


if __name__ == '__main__':
    main()
